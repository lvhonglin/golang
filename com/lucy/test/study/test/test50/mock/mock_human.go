// Code generated by MockGen. DO NOT EDIT.
// Source: a.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMockHuman is a mock of MockHuman interface.
type MockMockHuman struct {
	ctrl     *gomock.Controller
	recorder *MockMockHumanMockRecorder
}

// MockMockHumanMockRecorder is the mock recorder for MockMockHuman.
type MockMockHumanMockRecorder struct {
	mock *MockMockHuman
}

// NewMockMockHuman creates a new mock instance.
func NewMockMockHuman(ctrl *gomock.Controller) *MockMockHuman {
	mock := &MockMockHuman{ctrl: ctrl}
	mock.recorder = &MockMockHumanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockHuman) EXPECT() *MockMockHumanMockRecorder {
	return m.recorder
}

// Speak mocks base method.
func (m *MockMockHuman) Speak(cur string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Speak", cur)
	ret0, _ := ret[0].(string)
	return ret0
}

// Speak indicates an expected call of Speak.
func (mr *MockMockHumanMockRecorder) Speak(cur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Speak", reflect.TypeOf((*MockMockHuman)(nil).Speak), cur)
}

// Walk mocks base method.
func (m *MockMockHuman) Walk() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk")
	ret0, _ := ret[0].(string)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockMockHumanMockRecorder) Walk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockMockHuman)(nil).Walk))
}

// MockMockHuman2 is a mock of MockHuman2 interface.
type MockMockHuman2 struct {
	ctrl     *gomock.Controller
	recorder *MockMockHuman2MockRecorder
}

// MockMockHuman2MockRecorder is the mock recorder for MockMockHuman2.
type MockMockHuman2MockRecorder struct {
	mock *MockMockHuman2
}

// NewMockMockHuman2 creates a new mock instance.
func NewMockMockHuman2(ctrl *gomock.Controller) *MockMockHuman2 {
	mock := &MockMockHuman2{ctrl: ctrl}
	mock.recorder = &MockMockHuman2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockHuman2) EXPECT() *MockMockHuman2MockRecorder {
	return m.recorder
}

// Speak mocks base method.
func (m *MockMockHuman2) Speak(cur string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Speak", cur)
	ret0, _ := ret[0].(string)
	return ret0
}

// Speak indicates an expected call of Speak.
func (mr *MockMockHuman2MockRecorder) Speak(cur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Speak", reflect.TypeOf((*MockMockHuman2)(nil).Speak), cur)
}

// Walk mocks base method.
func (m *MockMockHuman2) Walk() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk")
	ret0, _ := ret[0].(string)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockMockHuman2MockRecorder) Walk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockMockHuman2)(nil).Walk))
}
